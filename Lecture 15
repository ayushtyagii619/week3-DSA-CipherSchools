//inheritance

#include<iostream>
using namespace std;
//single
class A{
};
class B: public A{
};

//multiple
class A{
};
class B{
};
class C: public A, public B{
};

//multilevel

class A{};
class B: public A{};
class C: public B{};

//heri.
class A{};
class B: public A{};
class C: public A{};
//hybrid
class A{};
class B{};
class C:public A, public B{};
class D: public C{};
class E: public C{};
int main(){
	return 0
}

//inheritance example

#include<iostream>
using namespace std;
//single
class Animal{
	public:
		void speak(){
			cout<<"sounds: "<<endl;
		}
};
class Dog: public Animal{
	public:
		void speak(){
			cout<<"wooff bhavv grrrr"<<endl;
		}
};
class Cat: public Animal{
	public:
		void speak(){
			cout<<"meowwww"<<endl;
		}
};


int main(){
	Dog d;
	Animal a;
	Cat c;
	a.speak();
	d.speak();
	c.speak();
		return 0;
}


//const. and dest.

#include<iostream>
using namespace std;
//single
class A{
	public:
		A(){
			cout<<"A's const."<<endl;
		}
		~A(){
	cout<<"A's dest. "<<endl;
}
};



class B: public A{
	public:
		B(){
			cout<<"B's const"<<endl;
		}
		~B(){
			cout<<"B's dest"<<endl;
		}
};


int main(){
	B obj;
		return 0;
}
